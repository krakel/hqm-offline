package de.doerl.hqm.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;

public class BaseDefaults {
	private static final Logger LOGGER = Logger.getLogger( BaseDefaults.class.getName());
	public static final String FILE_OPEN_DIR = "file.open.directory";
	public static final String LAST_OPEN = "last.open";
	public static final String LAST_OPEN_DIR = "last.open.dir";
	public static final String STACKTRC = "stackTrace.enabled";
	public static final String LOOK_AND_FEEL = "system.lookandfeel";
	private static final String[] KEYS = {
		FILE_OPEN_DIR, LAST_OPEN, LAST_OPEN_DIR, STACKTRC, LOOK_AND_FEEL
	};
	// @formatter:off
	private static final Object[][] DEFAULTS = {
		{ LOOK_AND_FEEL, "System" },
		{ STACKTRC, Boolean.FALSE },
		{ FILE_OPEN_DIR, System.getProperty( "user.home") },
		{ LAST_OPEN, new String[0] },
		{ LAST_OPEN_DIR, new String[0] }
	};
	// @formatter:on
	private static final File SOURCE = new File( SystemInfo.HQM_DIR, "hqm.pref");

	public BaseDefaults() {
	}

	protected static boolean isKeyForSave( String key) {
		for (int i = 0; i < KEYS.length; ++i) {
			if (key.startsWith( KEYS[i])) {
				return true;
			}
		}
		return false;
	}

	public static void save( PreferenceHash pref, OutputStream out) throws IOException {
		pref.store( out, "Generated by HQM Manager");
	}

	protected void addKeys( PreferenceHash pref, String[] keys) {
		if (keys == null) {
			return;
		}
		for (int i = 0; i < keys.length; ++i) {
			pref.setSave( keys[i], true);
		}
	}

	protected void addSave( PreferenceHash pref) {
		File oldFile = null;
		if (SOURCE.exists()) {
			oldFile = new File( SOURCE.getAbsolutePath() + ".old");
			if (!SOURCE.renameTo( oldFile)) {
				Utils.log( LOGGER, Level.WARNING, "error.preference.rename {0}", SOURCE.getName());
				return;
			}
		}
		try {
			saveFile( pref, SOURCE);
			if (oldFile != null) {
				oldFile.delete();
			}
		}
		catch (Exception ex) {
			if (oldFile != null) {
				oldFile.renameTo( SOURCE);
			}
			Utils.log( LOGGER, Level.WARNING, "error.preference.save {0}", SOURCE.getName(), ex.getMessage());
		}
	}

	protected void check( PreferenceHash pref) {
		pref.checkString( FILE_OPEN_DIR);
		pref.checkArray( LAST_OPEN);
		pref.checkArray( LAST_OPEN_DIR);
		pref.checkBool( STACKTRC);
	}

	protected Object getDefault( String key) {
		for (int i = 0; i < DEFAULTS.length; ++i) {
			if (key.equals( DEFAULTS[i][0])) {
				return DEFAULTS[i][1];
			}
		}
		return null;
	}

	protected void keys( PreferenceHash pref) {
		addKeys( pref, KEYS);
	}

	protected void load( PreferenceHash pref) {
		try {
			if (!SOURCE.createNewFile()) {
				loadFile( pref, SOURCE);
			}
		}
		catch (IOException ex) {
			Utils.logThrows( LOGGER, Level.WARNING, ex);
		}
	}

	public void load( PreferenceHash pref, InputStream in) throws IOException {
		pref.load( in);
		Utils.setStackTrace( pref.getBool( BaseDefaults.STACKTRC));
	}

	private void loadFile( PreferenceHash pref, File file) throws IOException {
		FileInputStream in = null;
		try {
			in = new FileInputStream( file);
			load( pref, in);
		}
		finally {
			if (in != null) {
				in.close();
			}
		}
	}

	private void saveFile( PreferenceHash pref, File file) throws IOException {
		FileOutputStream out = null;
		try {
			out = new FileOutputStream( file);
			save( pref, out);
		}
		finally {
			if (out != null) {
				out.close();
			}
		}
	}

	void store( OutputStream out, String header, PreferenceHash preferenceHash) throws IOException {
		try {
			preferenceHash.store( out, header);
			out.write( '\n');
		}
		finally {
		}
	}
}
